{
    "docs": [
        {
            "location": "/",
            "text": "ProtonType\n\n  \n\n    \n\n  \n\n  \n\n\n\n\n\nUm simples web framework feito em TypeScript.\n\n\nO ProtonType tem como objetivo tornar simples e agrad\u00e1vel o desenvolvimento de APIs REST.\n\n\nInstala\u00e7\u00e3o\n\n\nnpm install protontype --save\n\n\n\n\n\nModels\n\n\nUsa \nTypeORM\n por padr\u00e3o para manipula\u00e7\u00e3o de banco de dados. Mas pode ser usado qualquer framework.\n\n\n@Entity\n()\n\n\nexport\n \nclass\n \nTasksModel\n \n{\n\n    \n@PrimaryGeneratedColumn\n()\n\n    \nid\n: \nnumber\n;\n\n    \n@Column\n({\n \nnullable\n: \ntrue\n \n})\n\n    \ntitle\n: \nstring\n;\n\n    \n@Column\n()\n\n    \ndone\n: \nboolean\n;\n\n    \n@Column\n()\n\n    \nuserId\n: \nnumber\n;\n\n\n}\n\n\n\n\n\n\nMiddlewares\n\n\nSuporta implementa\u00e7\u00e3o de middlewares\n\n\nexport\n \nclass\n \nTasksMiddleware\n \nextends\n \nBaseMiddleware\n \n{\n\n    \n@Middleware\n()\n\n    \nprintTaskTitle\n(\nparams\n: \nMiddlewareFunctionParams\n)\n \n{\n\n        \ncosole\n.\nlog\n(\nparams\n.\nreq\n.\nbody\n.\ntitle\n);\n\n        \nparams\n.\nnext\n();\n\n    \n}\n\n\n}\n\n\n\n\n\n\nRouter\n\n\nRotas b\u00e1sicas de CRUD j\u00e1 implementadas nos \nCrudRouter\n\n\n \n@RouterClass\n({\n\n    \nbaseUrl\n:\n \n\"/tasks\"\n,\n\n    \nmodel\n: \nTasksModel\n,\n\n    \nmiddlewares\n:\n \n[\nnew\n \nTasksMiddleware\n()]\n\n\n})\n\n\nexport\n \nclass\n \nTasksRouter\n \nextends\n \nCrudRouter\n \n{\n\n    \n/*\n\n\n    GET / - Lista todos registros\n\n\n    POST / - Cria um registro\n\n\n    GET /:id - Consulta um registro\n\n\n    PUT /:id - Atualiza um registro\n\n\n    DELETE /:id - Remove um registro\n\n\n    */\n\n\n    \n//Novas rotas customizadas ....\n\n\n}\n\n\n\n\n\n\nOu pode implementar rotas customizadas\n\n\n \n@RouterClass\n({\n\n    \nbaseUrl\n:\n \n\"/tasks\"\n,\n\n    \nmodel\n: \nTasksModel\n,\n\n    \nmiddlewares\n:\n \n[\nnew\n \nTasksMiddleware\n()]\n\n\n})\n\n\nexport\n \nclass\n \nTasksRouter\n \nextends\n \nBaseRouter\n \n{\n\n    \n@Route\n({\n\n        \nendpoint\n:\n \n'/test/msg'\n,\n\n        \nmethod\n: \nMethod.GET\n,\n\n        \nmiddlewares\n:\n \n[\nnew\n \nOtherMiddleware\n()]\n\n    \n})\n\n    \nrouteTest\n(\nparams\n: \nRouterFunctionParams\n)\n \n{\n\n        \nconsole\n.\nlog\n(\n\"Hello!\"\n);\n\n    \n}\n\n\n}\n\n\n\n\n\n\nAcessando o banco de dados\n\n\nlet\n \ntasksRepository\n \n=\n \nTypeORMDB\n.\ngetBD\n().\ngetRepository\n(\nTasksModel\n);\n\n\nlet\n \ntasks\n \n=\n \nawait\n \ntasksRepository\n.\nfind\n();\n\n\n\n\n\n\nIniciando a aplica\u00e7\u00e3o\n\n\nnew\n \nProtonApplication\n()\n\n    \n.\naddRouterAs\n(\nTasksRouter\n)\n\n    \n.\naddMiddlewareAs\n(\nSomeoneGlobalMiddleware\n)\n\n    \n.\nstart\n();\n\n\n\n\n\n\nExemplos\n\n\n\n\n\n\nExemplo b\u00e1sico\n\n\n\n\n\n\nExemplo com o m\u00f3dulo do Sequelize\n\n\n\n\n\n\nVers\u00e3o de desenvolvimento\n\n\nnpm install protontype@dev --save",
            "title": "Home"
        },
        {
            "location": "/#instalacao",
            "text": "npm install protontype --save",
            "title": "Instala\u00e7\u00e3o"
        },
        {
            "location": "/#models",
            "text": "Usa  TypeORM  por padr\u00e3o para manipula\u00e7\u00e3o de banco de dados. Mas pode ser usado qualquer framework.  @Entity ()  export   class   TasksModel   { \n     @PrimaryGeneratedColumn () \n     id :  number ; \n     @Column ({   nullable :  true   }) \n     title :  string ; \n     @Column () \n     done :  boolean ; \n     @Column () \n     userId :  number ;  }",
            "title": "Models"
        },
        {
            "location": "/#middlewares",
            "text": "Suporta implementa\u00e7\u00e3o de middlewares  export   class   TasksMiddleware   extends   BaseMiddleware   { \n     @Middleware () \n     printTaskTitle ( params :  MiddlewareFunctionParams )   { \n         cosole . log ( params . req . body . title ); \n         params . next (); \n     }  }",
            "title": "Middlewares"
        },
        {
            "location": "/#router",
            "text": "Rotas b\u00e1sicas de CRUD j\u00e1 implementadas nos  CrudRouter    @RouterClass ({ \n     baseUrl :   \"/tasks\" , \n     model :  TasksModel , \n     middlewares :   [ new   TasksMiddleware ()]  })  export   class   TasksRouter   extends   CrudRouter   { \n     /*      GET / - Lista todos registros      POST / - Cria um registro      GET /:id - Consulta um registro      PUT /:id - Atualiza um registro      DELETE /:id - Remove um registro      */ \n\n     //Novas rotas customizadas ....  }   Ou pode implementar rotas customizadas    @RouterClass ({ \n     baseUrl :   \"/tasks\" , \n     model :  TasksModel , \n     middlewares :   [ new   TasksMiddleware ()]  })  export   class   TasksRouter   extends   BaseRouter   { \n     @Route ({ \n         endpoint :   '/test/msg' , \n         method :  Method.GET , \n         middlewares :   [ new   OtherMiddleware ()] \n     }) \n     routeTest ( params :  RouterFunctionParams )   { \n         console . log ( \"Hello!\" ); \n     }  }",
            "title": "Router"
        },
        {
            "location": "/#acessando-o-banco-de-dados",
            "text": "let   tasksRepository   =   TypeORMDB . getBD (). getRepository ( TasksModel );  let   tasks   =   await   tasksRepository . find ();",
            "title": "Acessando o banco de dados"
        },
        {
            "location": "/#iniciando-a-aplicacao",
            "text": "new   ProtonApplication () \n     . addRouterAs ( TasksRouter ) \n     . addMiddlewareAs ( SomeoneGlobalMiddleware ) \n     . start ();",
            "title": "Iniciando a aplica\u00e7\u00e3o"
        },
        {
            "location": "/#exemplos",
            "text": "Exemplo b\u00e1sico    Exemplo com o m\u00f3dulo do Sequelize",
            "title": "Exemplos"
        },
        {
            "location": "/#versao-de-desenvolvimento",
            "text": "npm install protontype@dev --save",
            "title": "Vers\u00e3o de desenvolvimento"
        },
        {
            "location": "/quickstart/",
            "text": "Quick Start\n\n\nEstrutura de pastas e configura\u00e7\u00f5es iniciais\n\n\n    mkdir proton-quickstart\n    \ncd\n proton-quickstart\n    npm init\n    npm install typescript -g\n    npm install protontype --save\n    npm install sqlite3 --save\n    mkdir src\n\n\n\n\n\nCriar o arquivo tsconfig.json na raiz do projeto\n\n\n    \n{\n\n      \n\"compilerOptions\"\n:\n \n{\n\n        \n\"target\"\n:\n \n\"es6\"\n,\n\n        \n\"module\"\n:\n \n\"commonjs\"\n,\n\n        \n\"emitDecoratorMetadata\"\n:\n \ntrue\n,\n\n        \n\"experimentalDecorators\"\n:\n \ntrue\n,\n\n        \n\"esModuleInterop\"\n:\n \ntrue\n,\n\n        \n\"outDir\"\n:\n \n\"dist\"\n\n      \n},\n\n      \n\"exclude\"\n:\n \n[\n\n        \n\"node_modules\"\n,\n\n        \n\"dist\"\n\n      \n]\n\n    \n}\n\n\n\n\n\n\nCriar arquivo proton.json na raiz do projeto\n\n\n{\n\n  \n\"servers\"\n:\n \n[\n\n    \n{\n\n      \n\"port\"\n:\n \n3001\n,\n\n      \n\"useHttps\"\n:\n \nfalse\n\n    \n}\n\n  \n],\n\n  \n\"database\"\n:\n \n{\n\n    \n\"name\"\n:\n \n\"defaultTestConnection\"\n,\n\n    \n\"type\"\n:\n \n\"sqlite\"\n,\n\n    \n\"database\"\n:\n \n\"./proton.sqlite\"\n,\n\n    \n\"synchronize\"\n:\n \ntrue\n,\n\n    \n\"logging\"\n:\n \nfalse\n,\n\n    \n\"entities\"\n:\n \n[\n\n      \n\"./dist/models/**/*.js\"\n\n    \n]\n\n  \n},\n\n  \n\"defaultRoutes\"\n:\n \ntrue\n,\n\n\n}\n\n\n\n\n\n\nModel\n\n\nCriar um arquivo \nsrc/models/TasksModel.ts\n\n\nimport\n \n{\n \nColumn\n,\n \nEntity\n,\n \nPrimaryGeneratedColumn\n \n}\n \nfrom\n \n'typeorm'\n;\n\n\n\n@Entity\n()\n\n\nexport\n \nclass\n \nTasksModel\n \n{\n\n    \n@PrimaryGeneratedColumn\n()\n\n    \nid\n: \nnumber\n;\n\n    \n@Column\n({\n \nnullable\n: \ntrue\n \n})\n\n    \ntitle\n: \nstring\n;\n\n    \n@Column\n()\n\n    \ndone\n: \nboolean\n;\n\n    \n@Column\n({\n \nnullable\n: \ntrue\n \n})\n\n    \nuserId\n: \nnumber\n;\n\n\n}\n\n\n\n\n\n\nMiddleware\n\n\nCriar um arquivo \nsrc/middlewares/TasksMiddleware.ts\n\n\nimport\n \n{\n \nProtonMiddleware\n,\n \nMiddleware\n,\n \nMiddlewareFunctionParams\n \n}\n \nfrom\n \n\"protontype\"\n;\n\n\n\nexport\n \nclass\n \nTasksMiddleware\n \nextends\n \nProtonMiddleware\n \n{\n\n\n    \n@Middleware\n()\n\n    \nsayHello\n(\nparams\n: \nMiddlewareFunctionParams\n)\n \n{\n\n        \nconsole\n.\nlog\n(\n\"Hello!\"\n);\n\n        \nparams\n.\nnext\n();\n\n    \n}\n\n\n}\n\n\n\n\n\n\nRouter\n\n\nCriar arquivo \nsrc/routers/TasksRouter.ts\n\n\nimport\n \n{\n \nRouterClass\n,\n \nTypeORMCrudRouter\n,\n \nBodyParserMiddleware\n \n}\n \nfrom\n \n'protontype'\n;\n\n\n\nimport\n \n{\n \nTasksModel\n \n}\n \nfrom\n \n'../models/TasksModel'\n;\n\n\nimport\n \n{\n \nTasksMiddleware\n \n}\n \nfrom\n \n'../middlewares/TasksMiddleware'\n;\n\n\n\n@RouterClass\n({\n\n    \nbaseUrl\n:\n \n\"/tasks\"\n,\n\n    \nmodel\n: \nTasksModel\n,\n\n    \nmiddlewares\n:\n \n[\nnew\n \nTasksMiddleware\n()]\n\n\n})\n\n\nexport\n \nclass\n \nTasksRouter\n \nextends\n \nTypeORMCrudRouter\n \n{\n\n\n\n}\n\n\n\n\n\n\nMain\n\n\nCriar arquivo \nsrc/Main.ts\n\n\nimport\n \n{\n \nTasksRouter\n \n}\n \nfrom\n \n'./routers/TasksRouter'\n;\n\n\nimport\n \n{\n \nProtonApplication\n \n}\n \nfrom\n \n'protontype'\n;\n\n\n\nnew\n \nProtonApplication\n()\n\n    \n.\naddRouter\n(\nnew\n \nTasksRouter\n())\n\n    \n.\nstart\n();\n\n\n\n\n\n\nCompilando e Rodando Aplica\u00e7\u00e3o\n\n\n    tsc\n    node dist/Main.js\n\n\n\n\n\nTestando a API\n\n\nPor padr\u00e3o, a aplica\u00e7\u00e3o usar\u00e1 um banco de dados sqlite. \nSer\u00e1 criado um arquivo proton.sqlite na raiz do projeto.\n\n\nOs endpoints abaixo j\u00e1 estar\u00e3o dispon\u00edveis:\n\n\n\n\nGET http://localhost:3001/tasks\n - Lista todos os registos da tabela Particles\n\n\nPOST http://localhost:3001/tasks\n - Cria um registro na tabela Particles\n\n\nGET http://localhost:3001/tasks/:id\n - Consulta um registro da tabela Particles\n\n\nPUT http://localhost:3001/tasks/:id\n - Atualiza um registro da tabela Particles\n\n\nDELETE http://localhost:3001/tasks/:id\n - Remove um registro da tabela Particles\n\n\n\n\nPoder\u00e1 testar atrav\u00e9s do app \nPostman\n ou outro da sua prefer\u00eancia.\n\n\nReposit\u00f3rio\n\n\nhttps://github.com/protontype/protontype-example",
            "title": "Quick Start"
        },
        {
            "location": "/quickstart/#quick-start",
            "text": "",
            "title": "Quick Start"
        },
        {
            "location": "/quickstart/#estrutura-de-pastas-e-configuracoes-iniciais",
            "text": "mkdir proton-quickstart\n     cd  proton-quickstart\n    npm init\n    npm install typescript -g\n    npm install protontype --save\n    npm install sqlite3 --save\n    mkdir src  Criar o arquivo tsconfig.json na raiz do projeto       { \n       \"compilerOptions\" :   { \n         \"target\" :   \"es6\" , \n         \"module\" :   \"commonjs\" , \n         \"emitDecoratorMetadata\" :   true , \n         \"experimentalDecorators\" :   true , \n         \"esModuleInterop\" :   true , \n         \"outDir\" :   \"dist\" \n       }, \n       \"exclude\" :   [ \n         \"node_modules\" , \n         \"dist\" \n       ] \n     }   Criar arquivo proton.json na raiz do projeto  { \n   \"servers\" :   [ \n     { \n       \"port\" :   3001 , \n       \"useHttps\" :   false \n     } \n   ], \n   \"database\" :   { \n     \"name\" :   \"defaultTestConnection\" , \n     \"type\" :   \"sqlite\" , \n     \"database\" :   \"./proton.sqlite\" , \n     \"synchronize\" :   true , \n     \"logging\" :   false , \n     \"entities\" :   [ \n       \"./dist/models/**/*.js\" \n     ] \n   }, \n   \"defaultRoutes\" :   true ,  }",
            "title": "Estrutura de pastas e configura\u00e7\u00f5es iniciais"
        },
        {
            "location": "/quickstart/#model",
            "text": "Criar um arquivo  src/models/TasksModel.ts  import   {   Column ,   Entity ,   PrimaryGeneratedColumn   }   from   'typeorm' ;  @Entity ()  export   class   TasksModel   { \n     @PrimaryGeneratedColumn () \n     id :  number ; \n     @Column ({   nullable :  true   }) \n     title :  string ; \n     @Column () \n     done :  boolean ; \n     @Column ({   nullable :  true   }) \n     userId :  number ;  }",
            "title": "Model"
        },
        {
            "location": "/quickstart/#middleware",
            "text": "Criar um arquivo  src/middlewares/TasksMiddleware.ts  import   {   ProtonMiddleware ,   Middleware ,   MiddlewareFunctionParams   }   from   \"protontype\" ;  export   class   TasksMiddleware   extends   ProtonMiddleware   { \n\n     @Middleware () \n     sayHello ( params :  MiddlewareFunctionParams )   { \n         console . log ( \"Hello!\" ); \n         params . next (); \n     }  }",
            "title": "Middleware"
        },
        {
            "location": "/quickstart/#router",
            "text": "Criar arquivo  src/routers/TasksRouter.ts  import   {   RouterClass ,   TypeORMCrudRouter ,   BodyParserMiddleware   }   from   'protontype' ;  import   {   TasksModel   }   from   '../models/TasksModel' ;  import   {   TasksMiddleware   }   from   '../middlewares/TasksMiddleware' ;  @RouterClass ({ \n     baseUrl :   \"/tasks\" , \n     model :  TasksModel , \n     middlewares :   [ new   TasksMiddleware ()]  })  export   class   TasksRouter   extends   TypeORMCrudRouter   {  }",
            "title": "Router"
        },
        {
            "location": "/quickstart/#main",
            "text": "Criar arquivo  src/Main.ts  import   {   TasksRouter   }   from   './routers/TasksRouter' ;  import   {   ProtonApplication   }   from   'protontype' ;  new   ProtonApplication () \n     . addRouter ( new   TasksRouter ()) \n     . start ();   Compilando e Rodando Aplica\u00e7\u00e3o      tsc\n    node dist/Main.js",
            "title": "Main"
        },
        {
            "location": "/quickstart/#testando-a-api",
            "text": "Por padr\u00e3o, a aplica\u00e7\u00e3o usar\u00e1 um banco de dados sqlite. \nSer\u00e1 criado um arquivo proton.sqlite na raiz do projeto.  Os endpoints abaixo j\u00e1 estar\u00e3o dispon\u00edveis:   GET http://localhost:3001/tasks  - Lista todos os registos da tabela Particles  POST http://localhost:3001/tasks  - Cria um registro na tabela Particles  GET http://localhost:3001/tasks/:id  - Consulta um registro da tabela Particles  PUT http://localhost:3001/tasks/:id  - Atualiza um registro da tabela Particles  DELETE http://localhost:3001/tasks/:id  - Remove um registro da tabela Particles   Poder\u00e1 testar atrav\u00e9s do app  Postman  ou outro da sua prefer\u00eancia.",
            "title": "Testando a API"
        },
        {
            "location": "/quickstart/#repositorio",
            "text": "https://github.com/protontype/protontype-example",
            "title": "Reposit\u00f3rio"
        },
        {
            "location": "/db-connector/",
            "text": "Database Connectors\n\n\nA conex\u00e3o com banco de dados \u00e9 definida atrav\u00e9s da classe \nDBConnector\n. Assim o \nProtontype\n permite o uso de qualquer framework ou ORM para manipula\u00e7\u00e3o de banco de dados.\n\n\nPor padr\u00e3o \u00e9 usado o \nTypeORM\n para acessar o banco de dados\n\n\nAcessando Banco de Dados\n\n\nO m\u00f3dulo \nTypeORMDBConnector\n disponibiliza o objeto \nTypeORMDB\n que prov\u00ea a cesso aos objetos do \nTypeORM\n\n\nlet\n \ntasksRepository\n \n=\n \nTypeORMDB\n.\ngetBD\n().\ngetRepository\n(\nTasksModel\n);\n\n\nlet\n \ntasks\n \n=\n \nawait\n \ntasksRepository\n.\nfind\n();\n\n\n\n\n\n\nO objeto retornado pelo \nTypeORMDB.getBD()\n \u00e9 exatamente o objeto resultante da conex\u00e3o do \nTypeORM\n\n\n\n\nPara mais informa\u00e7\u00f5es ver documenta\u00e7\u00e3o do \nTypeORM\n\n\nVer tamb\u00e9m \nhttp://typeorm.io/#/working-with-repository\n\n\n\n\nCriando um DBConnector\n\n\nPara criar um DBConnector basta extender a classe \nDBConnector\n.\n\n\nexport\n \nabstract\n \nclass\n \nDBConnector\n<\nOptionsType\n,\n \nConnectionType\n>\n \n{\n\n    \nabstract\n \ncreateConnection\n(\nconfig?\n: \nOptionsType\n)\n:\n \nPromise\n<\nConnectionType\n>\n;\n\n\n}\n\n\n\n\n\n\n\n\nOptionsType\n: TIpo do objeto de configura\u00e7\u00e3o passado por par\u00e2metro no m\u00e9todo de conex\u00e3o\n\n\nConnectionType\n: Tipo do objeto de retorno. Resultado da conex\u00e3o. Sempre dever\u00e1 ser uma promisse\n\n\n\n\nExemplo de DBConnector\n\n\nimport\n \n{\n \nConnection\n,\n \nConnectionOptions\n,\n \ncreateConnection\n \n}\n \nfrom\n \n'typeorm'\n;\n\n\nimport\n \n{\n \nDBConnector\n \n}\n \nfrom\n \n'../DBConnector'\n;\n\n\n\nexport\n \nclass\n \nTypeORMDBConnector\n \nimplements\n \nDBConnector\n<\nConnectionOptions\n,\n \nConnection\n>\n \n{\n\n\n    \ncreateConnection\n(\noptions?\n: \nConnectionOptions\n)\n:\n \nPromise\n<\nConnection\n>\n \n{\n\n        \nreturn\n \ncreateConnection\n(\noptions\n);\n\n    \n}\n\n\n}",
            "title": "Connectors"
        },
        {
            "location": "/db-connector/#database-connectors",
            "text": "A conex\u00e3o com banco de dados \u00e9 definida atrav\u00e9s da classe  DBConnector . Assim o  Protontype  permite o uso de qualquer framework ou ORM para manipula\u00e7\u00e3o de banco de dados.  Por padr\u00e3o \u00e9 usado o  TypeORM  para acessar o banco de dados",
            "title": "Database Connectors"
        },
        {
            "location": "/db-connector/#acessando-banco-de-dados",
            "text": "O m\u00f3dulo  TypeORMDBConnector  disponibiliza o objeto  TypeORMDB  que prov\u00ea a cesso aos objetos do  TypeORM  let   tasksRepository   =   TypeORMDB . getBD (). getRepository ( TasksModel );  let   tasks   =   await   tasksRepository . find ();   O objeto retornado pelo  TypeORMDB.getBD()  \u00e9 exatamente o objeto resultante da conex\u00e3o do  TypeORM   Para mais informa\u00e7\u00f5es ver documenta\u00e7\u00e3o do  TypeORM  Ver tamb\u00e9m  http://typeorm.io/#/working-with-repository",
            "title": "Acessando Banco de Dados"
        },
        {
            "location": "/db-connector/#criando-um-dbconnector",
            "text": "Para criar um DBConnector basta extender a classe  DBConnector .  export   abstract   class   DBConnector < OptionsType ,   ConnectionType >   { \n     abstract   createConnection ( config? :  OptionsType ) :   Promise < ConnectionType > ;  }    OptionsType : TIpo do objeto de configura\u00e7\u00e3o passado por par\u00e2metro no m\u00e9todo de conex\u00e3o  ConnectionType : Tipo do objeto de retorno. Resultado da conex\u00e3o. Sempre dever\u00e1 ser uma promisse",
            "title": "Criando um DBConnector"
        },
        {
            "location": "/db-connector/#exemplo-de-dbconnector",
            "text": "import   {   Connection ,   ConnectionOptions ,   createConnection   }   from   'typeorm' ;  import   {   DBConnector   }   from   '../DBConnector' ;  export   class   TypeORMDBConnector   implements   DBConnector < ConnectionOptions ,   Connection >   { \n\n     createConnection ( options? :  ConnectionOptions ) :   Promise < Connection >   { \n         return   createConnection ( options ); \n     }  }",
            "title": "Exemplo de DBConnector"
        },
        {
            "location": "/models-typeorm/",
            "text": "Models\n\n\nCriando Models\n\n\nO \nProtonType\n usa o \nTypeORM\n por padr\u00e3o para cria\u00e7\u00e3o dos Models e acesso ao banco de dados. Qualquer outro framework pode ser usado por meio dos \nDBConnectors\n\n\nCriando um Model\n\n\nUsando a configura\u00e7\u00e3o padr\u00e3o, para criar um Model basta seguir a documenta\u00e7\u00e3o do \nTypeORM sobre Entities\n\n\nExemplo\n\n\n@Entity\n()\n\n\nexport\n \nclass\n \nTasksModel\n \n{\n\n    \n@PrimaryGeneratedColumn\n()\n\n    \nid\n: \nnumber\n;\n\n    \n@Column\n({\n \nnullable\n: \ntrue\n \n})\n\n    \ntitle\n: \nstring\n;\n\n    \n@Column\n()\n\n    \ndone\n: \nboolean\n;\n\n    \n@Column\n()\n\n    \nuserId\n: \nnumber\n;\n\n\n}\n\n\n\n\n\n\n\n\nA cria\u00e7\u00e3o dos modelos de banco de dados e mapeamentos, vai depender do \nDBConnector\n usado",
            "title": "Models"
        },
        {
            "location": "/models-typeorm/#models",
            "text": "",
            "title": "Models"
        },
        {
            "location": "/models-typeorm/#criando-models",
            "text": "O  ProtonType  usa o  TypeORM  por padr\u00e3o para cria\u00e7\u00e3o dos Models e acesso ao banco de dados. Qualquer outro framework pode ser usado por meio dos  DBConnectors",
            "title": "Criando Models"
        },
        {
            "location": "/models-typeorm/#criando-um-model",
            "text": "Usando a configura\u00e7\u00e3o padr\u00e3o, para criar um Model basta seguir a documenta\u00e7\u00e3o do  TypeORM sobre Entities",
            "title": "Criando um Model"
        },
        {
            "location": "/models-typeorm/#exemplo",
            "text": "@Entity ()  export   class   TasksModel   { \n     @PrimaryGeneratedColumn () \n     id :  number ; \n     @Column ({   nullable :  true   }) \n     title :  string ; \n     @Column () \n     done :  boolean ; \n     @Column () \n     userId :  number ;  }    A cria\u00e7\u00e3o dos modelos de banco de dados e mapeamentos, vai depender do  DBConnector  usado",
            "title": "Exemplo"
        },
        {
            "location": "/router/",
            "text": "Router\n\n\nA API do Protontype disponibiliza a classe \nExpressRouter\n para ser base dos routers.\n\n\nCriando um Router\n\n\nPara criar uma classe router basta estender a classe \nExpressRouter\n\n\nimport\n \n{\n \nExpressRouter\n \n}\n \nfrom\n \n'protontype'\n;\n\n\n\nexport\n \nclass\n \nTasksRouter\n \nextends\n \nExpressRouter\n \n{\n\n    \n...\n\n\n}\n\n\n\n\n\n\nPara configurar uma classe Router deve-se usar o decorator \n@RouterClass()\n\n\nimport\n \n{\n \nExpressRouter\n,\n \nRouterClass\n \n}\n \nfrom\n \n'protontype'\n;\n\n\n\n@RouterClass\n({\n\n    \nbaseUrl\n:\n \n\"/tasks\"\n,\n\n    \nmiddlewares\n:\n \n[\n \nnew\n \nMyMiddleware\n(),\n \nnew\n \nOtherMiddleware\n()\n \n]\n\n\n})\n\n\nexport\n \nclass\n \nTasksRouter\n \nextends\n \nExpressRouter\n \n{\n\n        \n...\n\n\n}\n\n\n\n\n\n\nUma classe Router poder\u00e1 conter v\u00e1rias fun\u00e7\u00f5es de rotas, chamadas \nRouter Functions\n. Para definir e configurar uma \nrouter function\n deve-se usar o decorator \n@Route()\n. Uma \nRouter Function\n recebe como par\u00e2metro um objeto do tipo \nRouterFunctionParams\n\n\nimport\n \n{\n \nExpressRouter\n,\n \nRouterFunctionParams\n,\n \nMethod\n,\n \nRoute\n \n}\n \nfrom\n \n'protontype'\n;\n\n\n\n@RouterClass\n({\n\n    \nbaseUrl\n:\n \n\"/tasks\"\n,\n\n    \nmiddlewares\n:\n \n[\n \nnew\n \nMyMiddleware\n(),\n \nnew\n \nOtherMiddleware\n()\n \n]\n\n\n})\n\n\nexport\n \nclass\n \nTasksRouter\n \nextends\n \nExpressRouter\n \n{\n\n\n    \n@Route\n({\n\n        \nendpoint\n:\n \n'/'\n,\n\n        \nmethod\n: \nMethod.GET\n\n    \n})\n\n    \nlistTasks\n(\nparams\n: \nRouterFunctionParams\n)\n \n{\n\n        \nparams\n.\nres\n.\nsend\n({\nid\n: \n1\n,\n \ntitle\n:\n \n'Task de teste'\n});\n\n    \n}\n\n\n}\n\n\n\n\n\n\n@RouterClass()\n\n\nUsado para definir uma classe que cont\u00e9m rotas. Todas classes do tipo \nExpressRouter\n suportam esta anota\u00e7\u00e3o.\n\n\n@RouterClass\n({\n\n    \nbaseUrl\n:\n \n\"/tasks\"\n,\n\n    \nmiddlewares\n:\n \n[\n \nnew\n \nMyRouterMiddleware\n(),\n \nnew\n \nOtherRouterMiddleware\n()\n \n]\n\n\n})\n\n\n\n\n\n\nPropriedades:\n\n\n\n\nbaseUrl\n: Url base do roteador. Todas rodas ser\u00e3o criadas no padr\u00e3o \nbaseUrl + endpoint\n\n\nmiddlewares\n: Middlewares que atuar\u00e3o para todas as rotas definidas neste router\n\n\n\n\n@Route()\n\n\nUsado para definir e configurar as rotas dentro de um router.\n\n\n@Route\n({\n\n    \nendpoint\n:\n \n'/list'\n,\n\n    \nmethod\n: \nMethod.GET\n,\n\n    \nmiddlewares\n:\n \n[\n \nnew\n \nMyRouteMiddleware\n(),\n \nnew\n \nOtherRouteMiddleware\n()\n \n]\n\n\n})\n\n\n\n\n\n\nPropriedades:\n\n\n\n\nendpoint\n: Define o endpoint da rota. A url desta rota ser\u00e1 formada pela \nbaseUrl\n (definida na \n@RouterClass\n) + \nendpoint\n. Exemplo: \nhttp://locathost/tasks/list\n\n\nmethod\n: Verbo HTTP usado para esta rota. GET, POST, DELETE...\n\n\nmiddlewares\n: Middlewares que atuar\u00e3o somente para esta rota espec\u00edfica\n\n\n\n\n\u00c9 possivel tamb\u00e9m usar o decorator \n@Route()\n sem par\u00e2metros, assim a router function deve criar as rotas diretamente usando o router do express.\n\n\n    \n@Route\n()\n\n    \npublic\n \nrootRoute\n()\n:\n \nvoid\n \n{\n\n        \nthis\n.\nrouter\n.\nget\n(\n\"\"\n,\n \n(\nreq\n,\n \nres\n)\n \n=>\n\n            \nres\n.\nsendFile\n(\n'routes.html'\n,\n \n{\n \n\"root\"\n:\n \n\"./src/views\"\n \n})\n\n        \n);\n\n    \n}\n\n\n\n\n\n\nRouterFunctionParams\n\n\nToda \nRouter Function\n deve ter como par\u00e2metro um objeto do tipo \nRouterFunctionParams\n\n\n@Route\n({\n\n    \nendpoint\n:\n \n'/'\n,\n\n    \nmethod\n: \nMethod.GET\n\n\n})\n\n\nlistTasks\n(\nparams\n: \nRouterFunctionParams\n)\n \n{\n\n    \nconsole\n.\nlog\n(\nparams\n.\nreq\n);\n\n    \nconsole\n.\nlog\n(\nparams\n.\nres\n);\n\n    \nconsole\n.\nlog\n(\nparams\n.\napp\n);\n\n\n}\n\n\n\n\n\n\nPropriedades:\n\n\n\n\nreq\n: Objeto que cont\u00e9m a requisi\u00e7\u00e3o http. Corresponde ao objeto de request do \nExpress\n.\n\n\nres\n: Objeto usado para enviar a resposta http. Corresponde ao objeto de response do \nExpress\n.\n\n\napp\n: Inst\u00e2ncia da aplica\u00e7\u00e3o Protontype. Por meio dela pode-se acessar as propriedades da aplica\u00e7\u00e3o.",
            "title": "Router"
        },
        {
            "location": "/router/#router",
            "text": "A API do Protontype disponibiliza a classe  ExpressRouter  para ser base dos routers.",
            "title": "Router"
        },
        {
            "location": "/router/#criando-um-router",
            "text": "Para criar uma classe router basta estender a classe  ExpressRouter  import   {   ExpressRouter   }   from   'protontype' ;  export   class   TasksRouter   extends   ExpressRouter   { \n     ...  }   Para configurar uma classe Router deve-se usar o decorator  @RouterClass()  import   {   ExpressRouter ,   RouterClass   }   from   'protontype' ;  @RouterClass ({ \n     baseUrl :   \"/tasks\" , \n     middlewares :   [   new   MyMiddleware (),   new   OtherMiddleware ()   ]  })  export   class   TasksRouter   extends   ExpressRouter   { \n         ...  }   Uma classe Router poder\u00e1 conter v\u00e1rias fun\u00e7\u00f5es de rotas, chamadas  Router Functions . Para definir e configurar uma  router function  deve-se usar o decorator  @Route() . Uma  Router Function  recebe como par\u00e2metro um objeto do tipo  RouterFunctionParams  import   {   ExpressRouter ,   RouterFunctionParams ,   Method ,   Route   }   from   'protontype' ;  @RouterClass ({ \n     baseUrl :   \"/tasks\" , \n     middlewares :   [   new   MyMiddleware (),   new   OtherMiddleware ()   ]  })  export   class   TasksRouter   extends   ExpressRouter   { \n\n     @Route ({ \n         endpoint :   '/' , \n         method :  Method.GET \n     }) \n     listTasks ( params :  RouterFunctionParams )   { \n         params . res . send ({ id :  1 ,   title :   'Task de teste' }); \n     }  }",
            "title": "Criando um Router"
        },
        {
            "location": "/router/#routerclass",
            "text": "Usado para definir uma classe que cont\u00e9m rotas. Todas classes do tipo  ExpressRouter  suportam esta anota\u00e7\u00e3o.  @RouterClass ({ \n     baseUrl :   \"/tasks\" , \n     middlewares :   [   new   MyRouterMiddleware (),   new   OtherRouterMiddleware ()   ]  })   Propriedades:   baseUrl : Url base do roteador. Todas rodas ser\u00e3o criadas no padr\u00e3o  baseUrl + endpoint  middlewares : Middlewares que atuar\u00e3o para todas as rotas definidas neste router",
            "title": "@RouterClass()"
        },
        {
            "location": "/router/#route",
            "text": "Usado para definir e configurar as rotas dentro de um router.  @Route ({ \n     endpoint :   '/list' , \n     method :  Method.GET , \n     middlewares :   [   new   MyRouteMiddleware (),   new   OtherRouteMiddleware ()   ]  })   Propriedades:   endpoint : Define o endpoint da rota. A url desta rota ser\u00e1 formada pela  baseUrl  (definida na  @RouterClass ) +  endpoint . Exemplo:  http://locathost/tasks/list  method : Verbo HTTP usado para esta rota. GET, POST, DELETE...  middlewares : Middlewares que atuar\u00e3o somente para esta rota espec\u00edfica   \u00c9 possivel tamb\u00e9m usar o decorator  @Route()  sem par\u00e2metros, assim a router function deve criar as rotas diretamente usando o router do express.       @Route () \n     public   rootRoute () :   void   { \n         this . router . get ( \"\" ,   ( req ,   res )   => \n             res . sendFile ( 'routes.html' ,   {   \"root\" :   \"./src/views\"   }) \n         ); \n     }",
            "title": "@Route()"
        },
        {
            "location": "/router/#routerfunctionparams",
            "text": "Toda  Router Function  deve ter como par\u00e2metro um objeto do tipo  RouterFunctionParams  @Route ({ \n     endpoint :   '/' , \n     method :  Method.GET  })  listTasks ( params :  RouterFunctionParams )   { \n     console . log ( params . req ); \n     console . log ( params . res ); \n     console . log ( params . app );  }   Propriedades:   req : Objeto que cont\u00e9m a requisi\u00e7\u00e3o http. Corresponde ao objeto de request do  Express .  res : Objeto usado para enviar a resposta http. Corresponde ao objeto de response do  Express .  app : Inst\u00e2ncia da aplica\u00e7\u00e3o Protontype. Por meio dela pode-se acessar as propriedades da aplica\u00e7\u00e3o.",
            "title": "RouterFunctionParams"
        },
        {
            "location": "/basecrudrouter/",
            "text": "CRUD Routers\n\n\nA classe \nTypeORMCrudRouter\n prov\u00ea todas as funcionalidades de um \nExpressRouter\n mais as opera\u00e7\u00f5es b\u00e1sicas de CRUD, sem a necessidade de implementa\u00e7\u00e3o adicional, usando o \nTypeORMDBConnector\n.\n\n\nExemplo:\n\n\n@RouterClass\n({\n\n    \nbaseUrl\n:\n \n\"/tasks\"\n,\n\n    \nmodel\n: \nTasksModel\n\n\n})\n\n\nexport\n \nclass\n \nTasksRouter\n \nextends\n \nTypeORMCrudRouter\n \n{\n\n\n\n}\n\n\n\n\n\n\nEsta classe j\u00e1 prover\u00e1 as rotas:\n\n\n\n\nGET /\n - Lista todos registros\n\n\nPOST /\n - Cria um registro\n\n\nGET /:id\n - Consulta um registro\n\n\nPUT /:id\n - Atualiza um registro\n\n\nDELETE /:id\n - Remove um registro",
            "title": "CRUD Router"
        },
        {
            "location": "/basecrudrouter/#crud-routers",
            "text": "A classe  TypeORMCrudRouter  prov\u00ea todas as funcionalidades de um  ExpressRouter  mais as opera\u00e7\u00f5es b\u00e1sicas de CRUD, sem a necessidade de implementa\u00e7\u00e3o adicional, usando o  TypeORMDBConnector .  Exemplo:  @RouterClass ({ \n     baseUrl :   \"/tasks\" , \n     model :  TasksModel  })  export   class   TasksRouter   extends   TypeORMCrudRouter   {  }   Esta classe j\u00e1 prover\u00e1 as rotas:   GET /  - Lista todos registros  POST /  - Cria um registro  GET /:id  - Consulta um registro  PUT /:id  - Atualiza um registro  DELETE /:id  - Remove um registro",
            "title": "CRUD Routers"
        },
        {
            "location": "/middlewares/",
            "text": "Middlewares\n\n\nCriando Middlewares\n\n\nPra criar uma classe middleware base estender \nProtonMiddleware\n. Um middleware poder\u00e1 ter um Middleware Function.\n\n\nExemplo:\n\n\nimport\n \n{\n \nMiddleware\n,\n \nMiddlewareFunctionParams\n,\n \nProtonMiddleware\n \n}\n \nfrom\n \n'protontype'\n;\n\n\nexport\n \nclass\n \nExampleMiddleware\n \nextends\n \nProtonMiddleware\n \n{\n\n\n    \n@Middleware\n()\n\n    \nexampleMiddlewareFunc\n(\nparams\n: \nMiddlewareFunctionParams\n)\n \n{\n\n        \ncosole\n.\nlog\n(\nparams\n.\nreq\n);\n\n        \nconsole\n.\nlog\n(\nparams\n.\nres\n);\n\n        \nparams\n.\nnext\n();\n\n    \n}\n\n\n}\n\n\n\n\n\n\nMiddleware Function\n\n\nUm \nMiddleware Function\n \u00e9 uma fun\u00e7\u00e3o dentro de uma classe \nProtonMiddleware\n  anotada com o decorator \n@Middleware\n e tem como par\u00e2metro um objeto do tipo \nMiddlewareFunctionParams\n. Esta fun\u00e7\u00e3o define o comportamento do middleware.\n\n\n@Middleware\n()\n\n\nexampleMiddlewareFunc\n(\nparams\n: \nMiddlewareFunctionParams\n)\n \n{\n\n    \ncosole\n.\nlog\n(\nparams\n.\nreq\n);\n\n    \nconsole\n.\nlog\n(\nparams\n.\nres\n);\n\n    \nparams\n.\nnext\n();\n\n\n}\n\n\n\n\n\n\nO decorator \n@Middleware\n possui o par\u00e2metro opcional \nautoNext: boolean\n. Caso seja \ntrue\n a fun\u00e7\u00e3o \nnext()\n ser\u00e1 implicitamente chamada no final da fun\u00e7\u00e3o, n\u00e3o sendo necess\u00e1rio chamar explicitamente \nparams.next()\n. \n\n\nExemplo:\n\n\n@Middleware\n(\ntrue\n)\n\n\nexampleMiddlewareFunc\n(\nparams\n: \nMiddlewareFunctionParams\n)\n \n{\n\n    \ncosole\n.\nlog\n(\nparams\n.\nreq\n);\n\n    \nconsole\n.\nlog\n(\nparams\n.\nres\n);\n\n\n}\n\n\n\n\n\n\n@Middleware\n\n\nO decorator \n@Middleware()\n indica qual fun\u00e7\u00e3o cont\u00e9m o comportamento do middleware.\n\n\nPropriedades\n\n\n\n\nautoNext: \nboolean\n. Habilita a chamada impl\u00edcita da fun\u00e7\u00e3o \nnext()\n no final da execu\u00e7\u00e3o do middleware\n\n\n\n\nMiddlewareFunctionParams\n\n\nPar\u00e2metros de um \nMiddleware Function\n\n\nPropriedades\n\n\n\n\nreq\n: Objeto que cont\u00e9m a requisi\u00e7\u00e3o http. Corresponde ao objeto de request do \nExpress\n.\n\n\nres\n: Objeto usado para enviar a resposta http. Corresponde ao objeto de response do \nExpress\n.\n\n\nnext\n: fun\u00e7\u00e3o usada para chamar o pr\u00f3ximo middleware da cadeia\n\n\napp\n: Inst\u00e2ncia da aplica\u00e7\u00e3o Protontype. Por meio dela pode-se acessar as propriedades da aplica\u00e7\u00e3o.\n\n\n\n\nEscopo dos Middlewares\n\n\nOs middlewares podem atuar em diferentes escopos\n\n\nEscopo de Aplica\u00e7\u00e3o\n\n\nEste middleware atuar\u00e1 no escopo da global, ou seja antes de qualquer rota configurada.\nPara tornar um middleware global, deve-se adicionar ele no bootstrap da aplica\u00e7\u00e3o usando os m\u00e9todos \naddMiddleware ou addMiddlewareAs\n:\n\n\nnew\n \nProtonApplication\n()\n\n    \n.\naddMiddleware\n(\nnew\n \nExampleMiddleware\n())\n\n    \n.\naddMiddlewareAs\n(\nExampleMiddleware2\n)\n\n    \n.\nstart\n();\n\n\n\n\n\n\n\n\naddMiddleware\n:  Permite passar uma inst\u00e2ncia criada do middleware\n\n\naddMiddlewareAs\n: Permite passar o tipo do middleware para ser instanciado pela aplica\u00e7\u00e3o\n\n\n\n\nEscopo de Router\n\n\nEste middleware atuar\u00e1 para todas as \nRouter Functions\n dentro de uma classe \nExpressRouter\n.\nPara adicionar middlewares para atuar no escopo do router, este deve ser configurado no decorator \n@RouterClass()\n:\n\n\n@RouterClass\n({\n\n    \nbaseUrl\n:\n \n\"/tasks\"\n,\n\n    \nmiddlewares\n:\n \n[\n \nnew\n \nExampleMiddleware\n(),\n \nnew\n \nExampleMiddleware2\n()\n \n]\n\n\n})\n\n\nexport\n \nclass\n \nTaskRouter\n \nextends\n \nExpressRouter\n \n{\n\n \n...\n\n\n}\n\n\n\n\n\n\nEscopo de Rota (Router Function)\n\n\nEste middleware atuar\u00e1 somente para aquela rota espec\u00edfica. Para adicionar middlewares ao escopo da rota, este deve ser configurado no decorator \n@Route()\n:\n\n\n@RouterClass\n({\nbaseUrl\n:\n \n\"/tasks\"\n})\n\n\nexport\n \nclass\n \nTaskRouter\n \nextends\n \nExpressRouter\n \n{\n\n    \n@Route\n({\n\n        \nendpoint\n:\n \n'/'\n,\n\n        \nmethod\n: \nMethod.GET\n,\n\n        \nmiddlewares\n:\n \n[\n \nnew\n \nExampleMiddleware\n(),\n \nnew\n \nExampleMiddleware2\n()\n \n]\n\n    \n})\n\n    \nlistTask\n(\nparams\n: \nRouterFunctionParams\n)\n \n{\n\n        \n...\n\n    \n}\n\n\n}\n\n\n\n\n\n\nHook Methods\n\n\nO m\u00e9todo \nconfigMiddlewares()\n pode ser sobrescrito. Nele podemos acessar a inst\u00e2ncia do express e fazer qualquer configura\u00e7\u00e3o ou l\u00f3gica necess\u00e1ria.\n\n\nExemplo:\n\n\nexport\n \nclass\n \nDefaultMiddleware\n \nextends\n \nMiddleware\n \n{\n\n    \nprivate\n \nport\n: \nnumber\n \n=\n \n5555\n;\n\n    \nprivate\n \njsonSpaces\n: \nnumber\n \n=\n \n2\n;\n\n\n\npublic\n \nconfigMiddlewares\n()\n:\n \nvoid\n \n{\n\n    \nthis\n.\nexpress\n.\nset\n(\n\"port\"\n,\n \nthis\n.\nport\n);\n\n    \nthis\n.\nexpress\n.\nset\n(\n\"json spaces\"\n,\n \nthis\n.\njsonSpaces\n);\n\n    \nthis\n.\nexpress\n.\nuse\n(\nbodyParser\n.\njson\n());\n\n    \nthis\n.\nexpress\n.\nuse\n((\nreq\n,\n \nres\n,\n \nnext\n)\n \n=>\n \n{\n\n        \ndelete\n \nreq\n.\nbody\n.\nid\n;\n\n        \nnext\n();\n\n    \n})\n\n\n}",
            "title": "Middleware"
        },
        {
            "location": "/middlewares/#middlewares",
            "text": "",
            "title": "Middlewares"
        },
        {
            "location": "/middlewares/#criando-middlewares",
            "text": "Pra criar uma classe middleware base estender  ProtonMiddleware . Um middleware poder\u00e1 ter um Middleware Function.  Exemplo:  import   {   Middleware ,   MiddlewareFunctionParams ,   ProtonMiddleware   }   from   'protontype' ;  export   class   ExampleMiddleware   extends   ProtonMiddleware   { \n\n     @Middleware () \n     exampleMiddlewareFunc ( params :  MiddlewareFunctionParams )   { \n         cosole . log ( params . req ); \n         console . log ( params . res ); \n         params . next (); \n     }  }",
            "title": "Criando Middlewares"
        },
        {
            "location": "/middlewares/#middleware-function",
            "text": "Um  Middleware Function  \u00e9 uma fun\u00e7\u00e3o dentro de uma classe  ProtonMiddleware   anotada com o decorator  @Middleware  e tem como par\u00e2metro um objeto do tipo  MiddlewareFunctionParams . Esta fun\u00e7\u00e3o define o comportamento do middleware.  @Middleware ()  exampleMiddlewareFunc ( params :  MiddlewareFunctionParams )   { \n     cosole . log ( params . req ); \n     console . log ( params . res ); \n     params . next ();  }   O decorator  @Middleware  possui o par\u00e2metro opcional  autoNext: boolean . Caso seja  true  a fun\u00e7\u00e3o  next()  ser\u00e1 implicitamente chamada no final da fun\u00e7\u00e3o, n\u00e3o sendo necess\u00e1rio chamar explicitamente  params.next() .   Exemplo:  @Middleware ( true )  exampleMiddlewareFunc ( params :  MiddlewareFunctionParams )   { \n     cosole . log ( params . req ); \n     console . log ( params . res );  }",
            "title": "Middleware Function"
        },
        {
            "location": "/middlewares/#middleware",
            "text": "O decorator  @Middleware()  indica qual fun\u00e7\u00e3o cont\u00e9m o comportamento do middleware.  Propriedades   autoNext:  boolean . Habilita a chamada impl\u00edcita da fun\u00e7\u00e3o  next()  no final da execu\u00e7\u00e3o do middleware",
            "title": "@Middleware"
        },
        {
            "location": "/middlewares/#middlewarefunctionparams",
            "text": "Par\u00e2metros de um  Middleware Function  Propriedades   req : Objeto que cont\u00e9m a requisi\u00e7\u00e3o http. Corresponde ao objeto de request do  Express .  res : Objeto usado para enviar a resposta http. Corresponde ao objeto de response do  Express .  next : fun\u00e7\u00e3o usada para chamar o pr\u00f3ximo middleware da cadeia  app : Inst\u00e2ncia da aplica\u00e7\u00e3o Protontype. Por meio dela pode-se acessar as propriedades da aplica\u00e7\u00e3o.",
            "title": "MiddlewareFunctionParams"
        },
        {
            "location": "/middlewares/#escopo-dos-middlewares",
            "text": "Os middlewares podem atuar em diferentes escopos",
            "title": "Escopo dos Middlewares"
        },
        {
            "location": "/middlewares/#escopo-de-aplicacao",
            "text": "Este middleware atuar\u00e1 no escopo da global, ou seja antes de qualquer rota configurada.\nPara tornar um middleware global, deve-se adicionar ele no bootstrap da aplica\u00e7\u00e3o usando os m\u00e9todos  addMiddleware ou addMiddlewareAs :  new   ProtonApplication () \n     . addMiddleware ( new   ExampleMiddleware ()) \n     . addMiddlewareAs ( ExampleMiddleware2 ) \n     . start ();    addMiddleware :  Permite passar uma inst\u00e2ncia criada do middleware  addMiddlewareAs : Permite passar o tipo do middleware para ser instanciado pela aplica\u00e7\u00e3o",
            "title": "Escopo de Aplica\u00e7\u00e3o"
        },
        {
            "location": "/middlewares/#escopo-de-router",
            "text": "Este middleware atuar\u00e1 para todas as  Router Functions  dentro de uma classe  ExpressRouter .\nPara adicionar middlewares para atuar no escopo do router, este deve ser configurado no decorator  @RouterClass() :  @RouterClass ({ \n     baseUrl :   \"/tasks\" , \n     middlewares :   [   new   ExampleMiddleware (),   new   ExampleMiddleware2 ()   ]  })  export   class   TaskRouter   extends   ExpressRouter   { \n  ...  }",
            "title": "Escopo de Router"
        },
        {
            "location": "/middlewares/#escopo-de-rota-router-function",
            "text": "Este middleware atuar\u00e1 somente para aquela rota espec\u00edfica. Para adicionar middlewares ao escopo da rota, este deve ser configurado no decorator  @Route() :  @RouterClass ({ baseUrl :   \"/tasks\" })  export   class   TaskRouter   extends   ExpressRouter   { \n     @Route ({ \n         endpoint :   '/' , \n         method :  Method.GET , \n         middlewares :   [   new   ExampleMiddleware (),   new   ExampleMiddleware2 ()   ] \n     }) \n     listTask ( params :  RouterFunctionParams )   { \n         ... \n     }  }",
            "title": "Escopo de Rota (Router Function)"
        },
        {
            "location": "/middlewares/#hook-methods",
            "text": "O m\u00e9todo  configMiddlewares()  pode ser sobrescrito. Nele podemos acessar a inst\u00e2ncia do express e fazer qualquer configura\u00e7\u00e3o ou l\u00f3gica necess\u00e1ria.  Exemplo:  export   class   DefaultMiddleware   extends   Middleware   { \n     private   port :  number   =   5555 ; \n     private   jsonSpaces :  number   =   2 ;  public   configMiddlewares () :   void   { \n     this . express . set ( \"port\" ,   this . port ); \n     this . express . set ( \"json spaces\" ,   this . jsonSpaces ); \n     this . express . use ( bodyParser . json ()); \n     this . express . use (( req ,   res ,   next )   =>   { \n         delete   req . body . id ; \n         next (); \n     })  }",
            "title": "Hook Methods"
        },
        {
            "location": "/middlewares-builtin/",
            "text": "Built-in Middlewares\n\n\nO Protontype disponibiliza alguns middlewares embarcados. Para saber como criar e usar middlewares, ver sess\u00e3o de \nMiddlewares\n desta documenta\u00e7\u00e3o\n\n\nBodyParserMiddleware\n\n\nMiddleware que faz o parse do request para propriedade \nparams.req.body\n no formato texto. Para pasers do request em mais formatos pode-se usar o m\u00f3dulo \nproton-body-parser\n.\n\n\n@RouterClass\n({\nbaseUrl\n:\n \n\"/tasks\"\n})\n\n\nexport\n \nclass\n \nTaskRouter\n \nextends\n \nExpressRouter\n \n{\n\n    \n@Route\n({\n\n        \nendpoint\n:\n \n'/'\n,\n\n        \nmethod\n: \nMethod.GET\n,\n\n        \nmiddlewares\n:\n \n[\n \nnew\n \nBodyParserMiddleware\n()]\n\n    \n})\n\n    \nlistTask\n(\nparams\n: \nRouterFunctionParams\n)\n \n{\n\n        \nconsole\n.\nlog\n(\nparams\n.\nreq\n.\nbody\n);\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\nO \nTypeORMCrudRouter\n usa o \nBodyParserMiddleware\n para ler os campos recebidos no request das suas rotas default.\n\n\n\n\nJsonContentMiddleware(\n[pretty?: boolean]\n)\n\n\nMiddleware que adiciona informa\u00e7\u00f5es b\u00e1sicas no cabe\u00e7alho das respostas em formato JSON. Pode ser informado atrav\u00e9s do par\u00e2metro booleano \npretty\n se o JSON deve ser indentado.\n\n\nlet\n \nbasicJsonMiddleware\n \n=\n \nnew\n \nJsonContentMiddleware\n();\n\n\nlet\n \napp\n \n=\n \nnew\n \nProtonApplication\n()\n\n    \n.\naddMiddleware\n(\nbasicJsonMiddleware\n).\nstart\n();\n\n\n\n\n\n\nlet\n \nindentedJsonMiddleware\n \n=\n \nnew\n \nJsonContentMiddleware\n(\ntrue\n);\n\n\nlet\n \napp\n \n=\n \nnew\n \nProtonApplication\n()\n\n    \n.\naddMiddleware\n(\nindentedJsonMiddleware\n).\nstart\n();\n\n\n\n\n\n\nCORS\n\n\nO CORS j\u00e1 tem suporte embarcado no Protontype e pode ser ativado atrav\u00e9s do arquivo de configura\u00e7\u00e3o. Ver sess\u00e3o de \nConfigura\u00e7\u00f5es\n.\n\n\nHelmet\n\n\nO middleware \nHelmet\n ajuda a proteger a aplica\u00e7\u00e3o de algumas vulnerabilidades conhecidas atrav\u00e9s de configura\u00e7\u00f5es no cabe\u00e7alho HTTP. Este middleware j\u00e1 \u00e9 habilitado por padr\u00e3o no \nstart()\n da aplica\u00e7\u00e3o.",
            "title": "Built-in Middlewares"
        },
        {
            "location": "/middlewares-builtin/#built-in-middlewares",
            "text": "O Protontype disponibiliza alguns middlewares embarcados. Para saber como criar e usar middlewares, ver sess\u00e3o de  Middlewares  desta documenta\u00e7\u00e3o",
            "title": "Built-in Middlewares"
        },
        {
            "location": "/middlewares-builtin/#bodyparsermiddleware",
            "text": "Middleware que faz o parse do request para propriedade  params.req.body  no formato texto. Para pasers do request em mais formatos pode-se usar o m\u00f3dulo  proton-body-parser .  @RouterClass ({ baseUrl :   \"/tasks\" })  export   class   TaskRouter   extends   ExpressRouter   { \n     @Route ({ \n         endpoint :   '/' , \n         method :  Method.GET , \n         middlewares :   [   new   BodyParserMiddleware ()] \n     }) \n     listTask ( params :  RouterFunctionParams )   { \n         console . log ( params . req . body ); \n     }  }    O  TypeORMCrudRouter  usa o  BodyParserMiddleware  para ler os campos recebidos no request das suas rotas default.",
            "title": "BodyParserMiddleware"
        },
        {
            "location": "/middlewares-builtin/#jsoncontentmiddlewarepretty-boolean",
            "text": "Middleware que adiciona informa\u00e7\u00f5es b\u00e1sicas no cabe\u00e7alho das respostas em formato JSON. Pode ser informado atrav\u00e9s do par\u00e2metro booleano  pretty  se o JSON deve ser indentado.  let   basicJsonMiddleware   =   new   JsonContentMiddleware ();  let   app   =   new   ProtonApplication () \n     . addMiddleware ( basicJsonMiddleware ). start ();   let   indentedJsonMiddleware   =   new   JsonContentMiddleware ( true );  let   app   =   new   ProtonApplication () \n     . addMiddleware ( indentedJsonMiddleware ). start ();",
            "title": "JsonContentMiddleware([pretty?: boolean])"
        },
        {
            "location": "/middlewares-builtin/#cors",
            "text": "O CORS j\u00e1 tem suporte embarcado no Protontype e pode ser ativado atrav\u00e9s do arquivo de configura\u00e7\u00e3o. Ver sess\u00e3o de  Configura\u00e7\u00f5es .",
            "title": "CORS"
        },
        {
            "location": "/middlewares-builtin/#helmet",
            "text": "O middleware  Helmet  ajuda a proteger a aplica\u00e7\u00e3o de algumas vulnerabilidades conhecidas atrav\u00e9s de configura\u00e7\u00f5es no cabe\u00e7alho HTTP. Este middleware j\u00e1 \u00e9 habilitado por padr\u00e3o no  start()  da aplica\u00e7\u00e3o.",
            "title": "Helmet"
        },
        {
            "location": "/config/",
            "text": "Configura\u00e7\u00f5es\n\n\nConfigura\u00e7\u00e3o do projeto TypeScript\n\n\nAs seguintes configura\u00e7\u00f5es no \ntsconfig.json\n s\u00e3o necess\u00e1rias para o\nfuncionamento.\n\n\n{\n\n    \n\"compilerOptions\"\n:\n \n{\n\n      \n\"target\"\n:\n \n\"es5\"\n,\n\n      \n\"module\"\n:\n \n\"commonjs\"\n,\n\n      \n\"emitDecoratorMetadata\"\n:\n \ntrue\n,\n\n      \n\"experimentalDecorators\"\n:\n \ntrue\n,\n\n      \n\"esModuleInterop\"\n:\n \ntrue\n,\n\n    \n}\n\n\n}\n\n\n\n\n\n\nConfigura\u00e7\u00f5es da Aplica\u00e7\u00e3o\n\n\nPor padr\u00e3o a aplica\u00e7\u00e3o procurar\u00e1 um arquivo \nproton.json\n que poder\u00e1 ter as configura\u00e7\u00f5es: \n\n\n{\n\n  \n\"servers\"\n:\n \n[\n\n    \n{\n\n      \n\"port\"\n:\n \n3001\n,\n\n      \n\"useHttps\"\n:\n \nfalse\n\n    \n}\n\n  \n]\n\n  \n\"defaultRoutes\"\n:\n \ntrue\n,\n\n  \n\"database\"\n:\n \n{\n\n    \n\"name\"\n:\n \n\"defaultTestConnection\"\n,\n\n    \n\"type\"\n:\n \n\"sqlite\"\n,\n\n    \n\"database\"\n:\n \n\"proton.sqlite\"\n,\n\n    \n\"synchronize\"\n:\n \ntrue\n,\n\n    \n\"logging\"\n:\n \nfalse\n,\n\n    \n\"entities\"\n:\n \n[\n\n      \n\"./dist/models/**/*.js\"\n\n    \n]\n\n  \n}\n\n  \n}\n,\n\n  \n\"cors\"\n:\n \n{\n\n    \n\"origin\"\n:\n \n\"*\"\n,\n\n    \n\"methods\"\n:\n \n[\n\"GET\"\n,\n \n\"POST\"\n,\n \n\"OPTIONS\"\n,\n \n\"PUT\"\n,\n \n\"PATCH\"\n,\n \n\"DELETE\"\n],\n\n    \n\"allowedHeaders\"\n:\n \n[\n\"Content-Type\"\n,\n \n\"Authorization\"\n]\n\n  \n}\n,\n\n  \n\"logger\"\n:\n \n{\n\n    \n\"enabled\"\n:\n \nfalse\n,\n\n    \n\"transports\"\n:\n \n[\n\n      \n{\n\n        \n\"type\"\n:\n \n\"file\"\n,\n\n        \n\"options\"\n:\n \n{\n\n          \n\"filename\"\n:\n \n\"./test/logs.log\"\n\n        \n}\n\n      \n},\n\n      \n{\n\n        \n\"type\"\n:\n \n\"console\"\n\n      \n}\n\n    \n]\n\n  \n}\n,\n\n  \n\"https\"\n:\n \n{\n\n    \n\"enabled\"\n:\n \nfalse\n,\n\n    \n\"key\"\n:\n \n\"./src/cert/cert.key\"\n,\n\n    \n\"cert\"\n:\n \n\"./src/cert/cert.cert\"\n\n  \n}\n\n\n}\n\n\n\n\n\n\nEstrutura do Arquivo de Configura\u00e7\u00e3o\n\n\nexport\n \ninterface\n \nGlobalConfig\n \n{\n\n    \nservers\n: \nServerConfig\n[];\n\n    \ndatabase\n: \nany\n;\n\n    \ncors?\n: \ncors.CorsOptions\n;\n\n    \nlogger?\n: \nLoggerConfig\n;\n\n    \nhttps?\n: \nHTTPSConfig\n;\n\n    \ndefaultRoutes?\n: \nboolean\n;\n\n\n}\n\n\n\nexport\n \ninterface\n \nServerConfig\n \n{\n\n    \nport\n: \nnumber\n;\n\n    \nuseHttps\n: \nboolean\n;\n\n\n}\n\n\n\nexport\n \ninterface\n \nDatabaseConfig\n \n{\n\n    \nname\n: \nstring\n;\n\n    \nusername\n: \nstring\n;\n\n    \npassword\n: \nstring\n;\n\n    \noptions\n: \nsequelize.Options\n;\n\n\n}\n\n\nexport\n \ninterface\n \nDBDefine\n \n{\n\n    \nunderscored\n: \nboolean\n;\n\n\n}\n\n\nexport\n \ninterface\n \nHTTPSConfig\n \n{\n\n    \nenabled\n: \nboolean\n;\n\n    \nkey\n: \nstring\n;\n\n    \ncert\n: \nstring\n;\n\n\n}\n\n\nexport\n \ninterface\n \nLoggerConfig\n \n{\n\n    \nenabled\n: \nboolean\n;\n\n    \ntransports\n:\n \n{\n\n        \ntype\n: \nstring\n;\n\n        \noptions\n: \nwinston.TransportOptions\n;\n\n    \n}[];\n\n\n}\n\n\n\n\n\n\nGlobalConfig\n\n\n\n\n\n\n\n\nProriedade\n\n\nTipo\n\n\nDescri\u00e7\u00e3o\n\n\n\n\n\n\n\n\n\n\nservers\n\n\nServerConfig[]\n\n\nConfigura\u00e7\u00e3o das portas que ser\u00e3o levantadas. Permite multiplas configura\u00e7\u00f5es\n\n\n\n\n\n\ndatabase\n\n\nConnectionOptions\n\n\nConfigura\u00e7\u00e3o da base de dados usada pela aplica\u00e7\u00e3o (Depende do DBConnector usado)\n\n\n\n\n\n\ncors\n\n\ncors.CorsOptions\n\n\nConfigura\u00e7\u00e3o do CORS da aplica\u00e7\u00e3o. O Protontype usa o m\u00f3dulo \ncors\n para fazer esse trabalho. Esta propriedade segue o mesmo \nobjeto de configura\u00e7\u00e3o do m\u00f3dulo cors\n\n\n\n\n\n\nlogger\n\n\nLoggerConfig\n\n\nConfigura\u00e7\u00f5es de log\n\n\n\n\n\n\nhttps\n\n\nHTTPSConfig\n\n\nConfigura o HTTPS na aplica\u00e7\u00e3o\n\n\n\n\n\n\ndefaultRoutes\n\n\nboolean\n\n\nHabilita a configura\u00e7\u00e3o das rotas par\u00f5es que a aplica\u00e7\u00e3o disponibiliza.\n\n\n\n\n\n\n\n\nServerConfig\n\n\n\n\n\n\n\n\nPropriedade\n\n\nTipo\n\n\nDescri\u00e7\u00e3o\n\n\n\n\n\n\n\n\n\n\nport\n\n\nnumber\n\n\nPorta que o servidor ir\u00e1 levantar\n\n\n\n\n\n\nuseHttps\n\n\nboolean\n\n\nIndica se a porta usar\u00e1 HTTPS\n\n\n\n\n\n\n\n\nDatabase (ConnectionOptions)\n\n\nDepender\u00e1 do DBConnector usado. Por default o Protontype usa o TypeORM. \nAs propriedades do objeto \ndatabase: {...}\n ser\u00e1 de acordo com as configura\u00e7\u00f5es do TypeORM.\n\n\nVer \nconnection options do TypeORM\n\n\nLoggerConfig\n\n\n\n\n\n\n\n\nPropriedade\n\n\nTipo\n\n\nDescri\u00e7\u00e3o\n\n\n\n\n\n\n\n\n\n\nenabled\n\n\nboolean\n\n\nHabilita o log\n\n\n\n\n\n\ntransports\n\n\nObject\n\n\nConfigura onde os logs ser\u00e3o exibidos ou gravados\n\n\n\n\n\n\n\n\ntransports\n\n\n\n\n\n\n\n\nPropriedade\n\n\nTipo\n\n\nDescri\u00e7\u00e3o\n\n\n\n\n\n\n\n\n\n\ntype\n\n\nstring\n\n\nPode ser: \"file\" ou \"console\"\n\n\n\n\n\n\noptions\n\n\nwinston.TransportOptions\n\n\nOp\u00e7\u00f5es do m\u00f3dulo \nWinston\n\n\n\n\n\n\n\n\nExemplo\n\n\n\"transports\"\n:\n \n[\n\n      \n{\n\n        \n\"type\"\n:\n \n\"file\"\n,\n\n        \n\"options\"\n:\n \n{\n\n          \n\"filename\"\n:\n \n\"./test/logs.log\"\n\n        \n}\n\n      \n},\n\n      \n{\n\n        \n\"type\"\n:\n \n\"console\"\n\n      \n}\n\n    \n]\n\n  \n}\n\n\n\n\n\n\nHTTPSConfig\n\n\n\n\n\n\n\n\nPropriedade\n\n\nTipo\n\n\nDescri\u00e7\u00e3o\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nstring\n\n\nChave privada do certificado\n\n\n\n\n\n\ncert\n\n\nstring\n\n\nArquivo que cont\u00e9m o certificado (chave p\u00fablica)\n\n\n\n\n\n\n\n\nAcesso as Configura\u00e7\u00f5es na Aplica\u00e7\u00e3o\n\n\nPara ter acesso as propriedades do arquivo de configura\u00e7\u00e3o dentro da aplica\u00e7\u00e3o, o m\u00f3dulo disponibiiza a classe \nProtonConfigLoader\n.\nO m\u00e9todo \nloadConfig(filePath?: string)\n retorna um objeto do tipo \nGlobalConfig\n.\n\n\nlet\n \nconfig\n: \nGlobalConfig\n \n=\n \nProtonConfigLoader\n.\nloadConfig\n();\n\n\n\n\n\n\nPode-se opcionalmente espeficicar o caminho do arquivo. Caso n\u00e3o seja informado a fun\u00e7\u00e3o procurar\u00e1 um arquivo \nproton.json\n na raiz do projeto.\n\n\nlet\n \nconfig\n: \nGlobalConfig\n \n=\n \nProtonConfigLoader\n.\nloadConfig\n(\n'./config/custom-config.json'\n);",
            "title": "Configura\u00e7\u00f5es"
        },
        {
            "location": "/config/#configuracoes",
            "text": "",
            "title": "Configura\u00e7\u00f5es"
        },
        {
            "location": "/config/#configuracao-do-projeto-typescript",
            "text": "As seguintes configura\u00e7\u00f5es no  tsconfig.json  s\u00e3o necess\u00e1rias para o\nfuncionamento.  { \n     \"compilerOptions\" :   { \n       \"target\" :   \"es5\" , \n       \"module\" :   \"commonjs\" , \n       \"emitDecoratorMetadata\" :   true , \n       \"experimentalDecorators\" :   true , \n       \"esModuleInterop\" :   true , \n     }  }",
            "title": "Configura\u00e7\u00e3o do projeto TypeScript"
        },
        {
            "location": "/config/#configuracoes-da-aplicacao",
            "text": "Por padr\u00e3o a aplica\u00e7\u00e3o procurar\u00e1 um arquivo  proton.json  que poder\u00e1 ter as configura\u00e7\u00f5es:   { \n   \"servers\" :   [ \n     { \n       \"port\" :   3001 , \n       \"useHttps\" :   false \n     } \n   ] \n   \"defaultRoutes\" :   true , \n   \"database\" :   { \n     \"name\" :   \"defaultTestConnection\" , \n     \"type\" :   \"sqlite\" , \n     \"database\" :   \"proton.sqlite\" , \n     \"synchronize\" :   true , \n     \"logging\" :   false , \n     \"entities\" :   [ \n       \"./dist/models/**/*.js\" \n     ] \n   } \n   } , \n   \"cors\" :   { \n     \"origin\" :   \"*\" , \n     \"methods\" :   [ \"GET\" ,   \"POST\" ,   \"OPTIONS\" ,   \"PUT\" ,   \"PATCH\" ,   \"DELETE\" ], \n     \"allowedHeaders\" :   [ \"Content-Type\" ,   \"Authorization\" ] \n   } , \n   \"logger\" :   { \n     \"enabled\" :   false , \n     \"transports\" :   [ \n       { \n         \"type\" :   \"file\" , \n         \"options\" :   { \n           \"filename\" :   \"./test/logs.log\" \n         } \n       }, \n       { \n         \"type\" :   \"console\" \n       } \n     ] \n   } , \n   \"https\" :   { \n     \"enabled\" :   false , \n     \"key\" :   \"./src/cert/cert.key\" , \n     \"cert\" :   \"./src/cert/cert.cert\" \n   }  }",
            "title": "Configura\u00e7\u00f5es da Aplica\u00e7\u00e3o"
        },
        {
            "location": "/config/#estrutura-do-arquivo-de-configuracao",
            "text": "export   interface   GlobalConfig   { \n     servers :  ServerConfig []; \n     database :  any ; \n     cors? :  cors.CorsOptions ; \n     logger? :  LoggerConfig ; \n     https? :  HTTPSConfig ; \n     defaultRoutes? :  boolean ;  }  export   interface   ServerConfig   { \n     port :  number ; \n     useHttps :  boolean ;  }  export   interface   DatabaseConfig   { \n     name :  string ; \n     username :  string ; \n     password :  string ; \n     options :  sequelize.Options ;  }  export   interface   DBDefine   { \n     underscored :  boolean ;  }  export   interface   HTTPSConfig   { \n     enabled :  boolean ; \n     key :  string ; \n     cert :  string ;  }  export   interface   LoggerConfig   { \n     enabled :  boolean ; \n     transports :   { \n         type :  string ; \n         options :  winston.TransportOptions ; \n     }[];  }",
            "title": "Estrutura do Arquivo de Configura\u00e7\u00e3o"
        },
        {
            "location": "/config/#globalconfig",
            "text": "Proriedade  Tipo  Descri\u00e7\u00e3o      servers  ServerConfig[]  Configura\u00e7\u00e3o das portas que ser\u00e3o levantadas. Permite multiplas configura\u00e7\u00f5es    database  ConnectionOptions  Configura\u00e7\u00e3o da base de dados usada pela aplica\u00e7\u00e3o (Depende do DBConnector usado)    cors  cors.CorsOptions  Configura\u00e7\u00e3o do CORS da aplica\u00e7\u00e3o. O Protontype usa o m\u00f3dulo  cors  para fazer esse trabalho. Esta propriedade segue o mesmo  objeto de configura\u00e7\u00e3o do m\u00f3dulo cors    logger  LoggerConfig  Configura\u00e7\u00f5es de log    https  HTTPSConfig  Configura o HTTPS na aplica\u00e7\u00e3o    defaultRoutes  boolean  Habilita a configura\u00e7\u00e3o das rotas par\u00f5es que a aplica\u00e7\u00e3o disponibiliza.",
            "title": "GlobalConfig"
        },
        {
            "location": "/config/#serverconfig",
            "text": "Propriedade  Tipo  Descri\u00e7\u00e3o      port  number  Porta que o servidor ir\u00e1 levantar    useHttps  boolean  Indica se a porta usar\u00e1 HTTPS",
            "title": "ServerConfig"
        },
        {
            "location": "/config/#database-connectionoptions",
            "text": "Depender\u00e1 do DBConnector usado. Por default o Protontype usa o TypeORM. \nAs propriedades do objeto  database: {...}  ser\u00e1 de acordo com as configura\u00e7\u00f5es do TypeORM.  Ver  connection options do TypeORM",
            "title": "Database (ConnectionOptions)"
        },
        {
            "location": "/config/#loggerconfig",
            "text": "Propriedade  Tipo  Descri\u00e7\u00e3o      enabled  boolean  Habilita o log    transports  Object  Configura onde os logs ser\u00e3o exibidos ou gravados",
            "title": "LoggerConfig"
        },
        {
            "location": "/config/#transports",
            "text": "Propriedade  Tipo  Descri\u00e7\u00e3o      type  string  Pode ser: \"file\" ou \"console\"    options  winston.TransportOptions  Op\u00e7\u00f5es do m\u00f3dulo  Winston     Exemplo  \"transports\" :   [ \n       { \n         \"type\" :   \"file\" , \n         \"options\" :   { \n           \"filename\" :   \"./test/logs.log\" \n         } \n       }, \n       { \n         \"type\" :   \"console\" \n       } \n     ] \n   }",
            "title": "transports"
        },
        {
            "location": "/config/#httpsconfig",
            "text": "Propriedade  Tipo  Descri\u00e7\u00e3o      key  string  Chave privada do certificado    cert  string  Arquivo que cont\u00e9m o certificado (chave p\u00fablica)",
            "title": "HTTPSConfig"
        },
        {
            "location": "/config/#acesso-as-configuracoes-na-aplicacao",
            "text": "Para ter acesso as propriedades do arquivo de configura\u00e7\u00e3o dentro da aplica\u00e7\u00e3o, o m\u00f3dulo disponibiiza a classe  ProtonConfigLoader .\nO m\u00e9todo  loadConfig(filePath?: string)  retorna um objeto do tipo  GlobalConfig .  let   config :  GlobalConfig   =   ProtonConfigLoader . loadConfig ();   Pode-se opcionalmente espeficicar o caminho do arquivo. Caso n\u00e3o seja informado a fun\u00e7\u00e3o procurar\u00e1 um arquivo  proton.json  na raiz do projeto.  let   config :  GlobalConfig   =   ProtonConfigLoader . loadConfig ( './config/custom-config.json' );",
            "title": "Acesso as Configura\u00e7\u00f5es na Aplica\u00e7\u00e3o"
        },
        {
            "location": "/bootstrap/",
            "text": "Iniciando aplica\u00e7\u00e3o\n\n\nlet\n \nprotonApp\n \n=\n \nnew\n \nProtonApplication\n();\n\n\nprotonApp\n\n    \n.\nwithDBConnector\n(\nnew\n \nMyDBConnector\n())\n\n    \n.\naddRouter\n(\nnew\n \nTasksRouter\n())\n\n    \n.\naddMiddleware\n(\nnew\n \nTasksMiddleware\n())\n\n    \n.\nstart\n();\n\n\n\n\n\n\nou \n\n\nlet\n \nprotonApp\n \n=\n \nnew\n \nProtonApplication\n();\n\n\nprotonApp\n\n    \n.\nwithDBConnectorAs\n(\nMyDBConnector\n)\n\n    \n.\naddRouterAs\n(\nTasksRouter\n)\n\n    \n.\naddMiddlewareAs\n(\nTasksMiddleware\n)\n\n    \n.\nstart\n();\n\n\n\n\n\n\nConfigura\u00e7\u00f5es do Start\n\n\nMiddlewares\n\n\nAdiciona um middleware que atuar\u00e1 em todas as rotas da aplica\u00e7\u00e3o.\n\n\n\n\naddMiddleware\n: Adiciona uma inst\u00e2ncia criada do middleware\n\n\n\n\nlet\n \ntaskMiddleware\n \n=\n \nnew\n \nTasksMiddleware\n();\n\n\ntaskMiddleware\n.\nsetTaskName\n(\n\"MyTask\"\n);\n\n\ntaskMiddleware\n.\nsetTaskOwner\n(\n\"Bob\"\n);\n\n\n\nprotonApp\n.\naddMiddleware\n(\ntaskMiddleware\n);\n\n\n\n\n\n\n\n\naddMiddlewareAs\n: Adiciona o tipo do middleware para ser instanciado pela aplica\u00e7\u00e3o\n\n\n\n\nprotonApp\n.\naddMiddlewareAs\n(\nTasksMiddleware\n);\n\n\n\n\n\n\nRouters\n\n\nAdiciona um Router para que a apica\u00e7\u00e3o configure e levante suas rotas.\n\n\n\n\naddRouter\n: Adiciona uma inst\u00e2ncia criada do Router \n\n\n\n\nprotonApp\n.\naddRouter\n(\nnew\n \nTasksRouter\n());\n\n\n\n\n\n\n\n\naddRouterAs\n: Adiciona o tipo do Router para ser instanciado pela aplica\u00e7\u00e3o\n\n\n\n\nprotonApp\n.\naddRouterAs\n(\nTasksRouter\n);\n\n\n\n\n\n\nDatabase Connectors\n\n\nOpcional. Informa a aplica\u00e7\u00e3o qual m\u00f3dulo de conex\u00e3o e manipula\u00e7\u00e3o de banco de dados usar. Caso n\u00e3o seja informado usar\u00e1 o DBConnector padr\u00e3o. Ver \nDBConnectors\n\n\n\n\nwithDBConnector\n: Adiciona uma inst\u00e2ncia criada do DBConnector \n\n\n\n\nprotonApp\n.\nwithDBConnector\n(\nnew\n \nSequelizeDBConnector\n());\n\n\n\n\n\n\n\n\nwithDBConnectorAs\n: Adiciona o tipo do DBConnector para ser instanciado pela aplica\u00e7\u00e3o\n\n\n\n\nprotonApp\n.\nwithDBConnectorAs\n(\nSequelizeDBConnector\n);\n\n\n\n\n\n\nStart\n\n\nO m\u00e9todo \nprotonApp.start()\n inicia a aplica\u00e7\u00e3o, suas rotas e middlewares configurados.\n\n\nExemplo de uso completo\n\n\nhttps://github.com/protontype/protontype-sample",
            "title": "Iniciando Aplica\u00e7\u00e3o"
        },
        {
            "location": "/bootstrap/#iniciando-aplicacao",
            "text": "let   protonApp   =   new   ProtonApplication ();  protonApp \n     . withDBConnector ( new   MyDBConnector ()) \n     . addRouter ( new   TasksRouter ()) \n     . addMiddleware ( new   TasksMiddleware ()) \n     . start ();   ou   let   protonApp   =   new   ProtonApplication ();  protonApp \n     . withDBConnectorAs ( MyDBConnector ) \n     . addRouterAs ( TasksRouter ) \n     . addMiddlewareAs ( TasksMiddleware ) \n     . start ();",
            "title": "Iniciando aplica\u00e7\u00e3o"
        },
        {
            "location": "/bootstrap/#configuracoes-do-start",
            "text": "",
            "title": "Configura\u00e7\u00f5es do Start"
        },
        {
            "location": "/bootstrap/#middlewares",
            "text": "Adiciona um middleware que atuar\u00e1 em todas as rotas da aplica\u00e7\u00e3o.   addMiddleware : Adiciona uma inst\u00e2ncia criada do middleware   let   taskMiddleware   =   new   TasksMiddleware ();  taskMiddleware . setTaskName ( \"MyTask\" );  taskMiddleware . setTaskOwner ( \"Bob\" );  protonApp . addMiddleware ( taskMiddleware );    addMiddlewareAs : Adiciona o tipo do middleware para ser instanciado pela aplica\u00e7\u00e3o   protonApp . addMiddlewareAs ( TasksMiddleware );",
            "title": "Middlewares"
        },
        {
            "location": "/bootstrap/#routers",
            "text": "Adiciona um Router para que a apica\u00e7\u00e3o configure e levante suas rotas.   addRouter : Adiciona uma inst\u00e2ncia criada do Router    protonApp . addRouter ( new   TasksRouter ());    addRouterAs : Adiciona o tipo do Router para ser instanciado pela aplica\u00e7\u00e3o   protonApp . addRouterAs ( TasksRouter );",
            "title": "Routers"
        },
        {
            "location": "/bootstrap/#database-connectors",
            "text": "Opcional. Informa a aplica\u00e7\u00e3o qual m\u00f3dulo de conex\u00e3o e manipula\u00e7\u00e3o de banco de dados usar. Caso n\u00e3o seja informado usar\u00e1 o DBConnector padr\u00e3o. Ver  DBConnectors   withDBConnector : Adiciona uma inst\u00e2ncia criada do DBConnector    protonApp . withDBConnector ( new   SequelizeDBConnector ());    withDBConnectorAs : Adiciona o tipo do DBConnector para ser instanciado pela aplica\u00e7\u00e3o   protonApp . withDBConnectorAs ( SequelizeDBConnector );",
            "title": "Database Connectors"
        },
        {
            "location": "/bootstrap/#start",
            "text": "O m\u00e9todo  protonApp.start()  inicia a aplica\u00e7\u00e3o, suas rotas e middlewares configurados.",
            "title": "Start"
        },
        {
            "location": "/bootstrap/#exemplo-de-uso-completo",
            "text": "https://github.com/protontype/protontype-sample",
            "title": "Exemplo de uso completo"
        },
        {
            "location": "/modules/",
            "text": "M\u00f3dulos NPM\n\n\nProtontype Sequelize\n\n\nDBConnector para usar o \nSequelize ORM\n. \n\n\nnpm install protontype-sequelize --save\n\n\n\n\n\nProton Compression\n\n\nMiddleware para adicionar compress\u00e3o\n\n\nnpm install proton-compression --save\n\n\n\n\n\nProton Body Parser\n\n\nMiddleware body-parser para Protontype\n\n\nnpm install proton-body-parser --save\n\n\n\n\n\nProton Cluster\n\n\nUtilit\u00e1rio para iniciar uma aplica\u00e7\u00e3o Protontype usando \nCluster\n\n\nnpm install proton-body-parser --save",
            "title": "M\u00f3dulos NPM"
        },
        {
            "location": "/modules/#modulos-npm",
            "text": "",
            "title": "M\u00f3dulos NPM"
        },
        {
            "location": "/modules/#protontype-sequelize",
            "text": "DBConnector para usar o  Sequelize ORM .   npm install protontype-sequelize --save",
            "title": "Protontype Sequelize"
        },
        {
            "location": "/modules/#proton-compression",
            "text": "Middleware para adicionar compress\u00e3o  npm install proton-compression --save",
            "title": "Proton Compression"
        },
        {
            "location": "/modules/#proton-body-parser",
            "text": "Middleware body-parser para Protontype  npm install proton-body-parser --save",
            "title": "Proton Body Parser"
        },
        {
            "location": "/modules/#proton-cluster",
            "text": "Utilit\u00e1rio para iniciar uma aplica\u00e7\u00e3o Protontype usando  Cluster  npm install proton-body-parser --save",
            "title": "Proton Cluster"
        },
        {
            "location": "/license/",
            "text": "The MIT License\n\n\nCopyright (c) 2017 Humberto Machado\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.",
            "title": "License"
        },
        {
            "location": "/en/",
            "text": "ProtonType\n\n  \n\n    \n\n  \n\n  \n\n\n\n\n\nA simple framework made with TypeScript.\n\n\nThe Protontype aims make APIs REST development easy.\n\n\nInstalation\n\n\nnpm install protontype --save\n\n\n\n\n\nModels\n\n\nUses \nTypeORM\n by default database manipulation. But any framework can be used.\n\n\n@Entity\n()\n\n\nexport\n \nclass\n \nTasksModel\n \n{\n\n    \n@PrimaryGeneratedColumn\n()\n\n    \nid\n: \nnumber\n;\n\n    \n@Column\n({\n \nnullable\n: \ntrue\n \n})\n\n    \ntitle\n: \nstring\n;\n\n    \n@Column\n()\n\n    \ndone\n: \nboolean\n;\n\n    \n@Column\n()\n\n    \nuserId\n: \nnumber\n;\n\n\n}\n\n\n\n\n\n\nMiddlewares\n\n\nSupports middlewares implementation\n\n\nexport\n \nclass\n \nTasksMiddleware\n \nextends\n \nBaseMiddleware\n \n{\n\n    \n@Middleware\n()\n\n    \nprintTaskTitle\n(\nparams\n: \nMiddlewareFunctionParams\n)\n \n{\n\n        \ncosole\n.\nlog\n(\nparams\n.\nreq\n.\nbody\n.\ntitle\n);\n\n        \nparams\n.\nnext\n();\n\n    \n}\n\n\n}\n\n\n\n\n\n\nRouter\n\n\nCRUD basic routes already implemented in \nCrudRouter\n\n\n \n@RouterClass\n({\n\n    \nbaseUrl\n:\n \n\"/tasks\"\n,\n\n    \nmodel\n: \nTasksModel\n,\n\n    \nmiddlewares\n:\n \n[\nnew\n \nTasksMiddleware\n()]\n\n\n})\n\n\nexport\n \nclass\n \nTasksRouter\n \nextends\n \nCrudRouter\n \n{\n\n    \n/*\n\n\n    GET / - Lists all records\n\n\n    POST / - Creates a records\n\n\n    GET /:id - Queries a records\n\n\n    PUT /:id - Updates a records\n\n\n    DELETE /:id - Removes a records\n\n\n    */\n\n\n    \n//New custom routes ....\n\n\n}\n\n\n\n\n\n\nOr can implements custom routes\n\n\n \n@RouterClass\n({\n\n    \nbaseUrl\n:\n \n\"/tasks\"\n,\n\n    \nmodel\n: \nTasksModel\n,\n\n    \nmiddlewares\n:\n \n[\nnew\n \nTasksMiddleware\n()]\n\n\n})\n\n\nexport\n \nclass\n \nTasksRouter\n \nextends\n \nBaseRouter\n \n{\n\n    \n@Route\n({\n\n        \nendpoint\n:\n \n'/test/msg'\n,\n\n        \nmethod\n: \nMethod.GET\n,\n\n        \nmiddlewares\n:\n \n[\nnew\n \nOtherMiddleware\n()]\n\n    \n})\n\n    \nrouteTest\n(\nparams\n: \nRouterFunctionParams\n)\n \n{\n\n        \nconsole\n.\nlog\n(\n\"Hello!\"\n);\n\n    \n}\n\n\n}\n\n\n\n\n\n\nDatabase manipulation\n\n\nlet\n \ntasksRepository\n \n=\n \nTypeORMDB\n.\ngetBD\n().\ngetRepository\n(\nTasksModel\n);\n\n\nlet\n \ntasks\n \n=\n \nawait\n \ntasksRepository\n.\nfind\n();\n\n\n\n\n\n\nStarting application\n\n\nnew\n \nProtonApplication\n()\n\n    \n.\naddRouterAs\n(\nTasksRouter\n)\n\n    \n.\naddMiddlewareAs\n(\nSomeoneGlobalMiddleware\n)\n\n    \n.\nstart\n();\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\nBasic example\n\n\n\n\n\n\nSequelize module example\n\n\n\n\n\n\nDevelopment version\n\n\nnpm install protontype@dev --save",
            "title": "Home"
        },
        {
            "location": "/en/#instalation",
            "text": "npm install protontype --save",
            "title": "Instalation"
        },
        {
            "location": "/en/#models",
            "text": "Uses  TypeORM  by default database manipulation. But any framework can be used.  @Entity ()  export   class   TasksModel   { \n     @PrimaryGeneratedColumn () \n     id :  number ; \n     @Column ({   nullable :  true   }) \n     title :  string ; \n     @Column () \n     done :  boolean ; \n     @Column () \n     userId :  number ;  }",
            "title": "Models"
        },
        {
            "location": "/en/#middlewares",
            "text": "Supports middlewares implementation  export   class   TasksMiddleware   extends   BaseMiddleware   { \n     @Middleware () \n     printTaskTitle ( params :  MiddlewareFunctionParams )   { \n         cosole . log ( params . req . body . title ); \n         params . next (); \n     }  }",
            "title": "Middlewares"
        },
        {
            "location": "/en/#router",
            "text": "CRUD basic routes already implemented in  CrudRouter    @RouterClass ({ \n     baseUrl :   \"/tasks\" , \n     model :  TasksModel , \n     middlewares :   [ new   TasksMiddleware ()]  })  export   class   TasksRouter   extends   CrudRouter   { \n     /*      GET / - Lists all records      POST / - Creates a records      GET /:id - Queries a records      PUT /:id - Updates a records      DELETE /:id - Removes a records      */ \n\n     //New custom routes ....  }   Or can implements custom routes    @RouterClass ({ \n     baseUrl :   \"/tasks\" , \n     model :  TasksModel , \n     middlewares :   [ new   TasksMiddleware ()]  })  export   class   TasksRouter   extends   BaseRouter   { \n     @Route ({ \n         endpoint :   '/test/msg' , \n         method :  Method.GET , \n         middlewares :   [ new   OtherMiddleware ()] \n     }) \n     routeTest ( params :  RouterFunctionParams )   { \n         console . log ( \"Hello!\" ); \n     }  }",
            "title": "Router"
        },
        {
            "location": "/en/#database-manipulation",
            "text": "let   tasksRepository   =   TypeORMDB . getBD (). getRepository ( TasksModel );  let   tasks   =   await   tasksRepository . find ();",
            "title": "Database manipulation"
        },
        {
            "location": "/en/#starting-application",
            "text": "new   ProtonApplication () \n     . addRouterAs ( TasksRouter ) \n     . addMiddlewareAs ( SomeoneGlobalMiddleware ) \n     . start ();",
            "title": "Starting application"
        },
        {
            "location": "/en/#examples",
            "text": "Basic example    Sequelize module example",
            "title": "Examples"
        },
        {
            "location": "/en/#development-version",
            "text": "npm install protontype@dev --save",
            "title": "Development version"
        }
    ]
}